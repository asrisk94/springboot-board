
스프링부트 프로젝트 기본 구조

ORM

JPA

엔티티

레포지토리

JPA CRUD

=================================================================================

스프링부트 프로젝트 기본 구조

- src/main/java 디렉토리

스프링부트 컨트롤러, 폼, DTO, 데이터베이스 처리를 위한 엔티티, 서비스 파일 등 작성하는 공간.



- 프로젝트명 + Application.java 파일

스프링부트 어플리케이션에서 시작을 담당하는 파일. (자동생성)
application 클래스 위에는 반드시 @SpringBootApplication 어노테이션 존재해야 한다. -> 모든 설정 관리



- templates 디렉토리

(src/main/resources 디렉토리 하위) 디렉토리인 templates 디렉토리에는 템플릿 파일을 저장한다.
템플릿 파일은 HTML 파일 형태로 자바 객체와 연동되는 파일. templates 디렉토리에는 질문목록, 질문 상세 등의 html 파일 저장.



- static 디렉토리
(src/main/resources 디렉토리 하위) 프로젝트 css, js, 이미지 파일 등을 저장하는 공간.



- application.properties

(src/main/resources 디렉토리 하위) 프로퍼티 파일은 프로젝트  환경 설정 역할.
프로젝트 환경, DB 설정 등을 이 파일에 저장.



- src/test/java 디렉토리

프로젝트에서 작성한 파일을 테스트하기 위한 테스트 코드 작성 공간.
JUnit과 스프링부트 테스팅 도구 사용하여 서버를 실행하지 않은 상태에서 src/main/java 디렉토리 작성 코드 테스트.



- build.gradle 파일

그레이들이 사용하는 환경 파일. ant, maven과 같은 이전 세대 빌드 도구의 단점을 보완하고 장점을 취합하여 만든 빌드 도구.
build.gradle 파일에는 프로젝트를 위한 필요한 플러그인과 라이브러리 등을 기술.

--------------------------------------------------------------------------------------------------------------------------------------------------

ORM (Object Relational Mapping)

객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것
DB에 데이터를 저장하는 테이블을 자바 클래스로 만들어 관리 가능하게 해주는 기술.
DB 종류와 상관없이 일관된 코드 유지 가능.
유지보수 용이 / 개발자가 달라도 통일된 쿼리 작성 가능 / 오류 발생률 낮아짐

-------------------------------------------------------------------------------------------------------------------------------------------------

JPA (Java Persistence API)

자바진영에서 ORM의 기술표준으로 사용하는 인터페이스 모음

JPA는 인터페이스이므로 구현하는 실제 클래스 필요.
대표적 클래스에는 하이버네이트가 있다.

--------------------------------------------------------------------------------------------------------------

엔티티

DB 테이블과 매핑되는 자바 클래스.

클래스위에 @Entity 달아줘야 한다. (@Controller 사용과 동일)

 - 사용되는 어노테이션들

@Id
 - PK 지정

@GeneratedValue(strategy = GenerationType.IDENTITY)
 - 값 저장시 해당 속성값을 따로 지정하지 않아도 1씩 증가하며 세팅.
 - strategy는 채번 규칙. GenerationType.IDENTITY는 해당 컬럼만의 독립적 시퀀스를 사용한다는 뜻.
   이를 지정하지 않으면 다른 컬럼들과 시퀀스를 공유하므로 일정한 순서의 고유번호를 생성하지 못한다.

@Column
 - 해당 속성을 컬럼으로 지정.
   사실 지정하지 않아도 알아서 인식하기 때문에, 이걸 달아주는 경우는 속성의 속성을 지정하기 위함.
  ex) @Column(length = 200)	@Column(columnDefinition = "TEXT")
        컬럼 길이 200		   컬럼길이 지정 어려울 경우 TEXT 속성으로 지정 (변동)
 - 따라서 컬럼이 아니라고 지정하려면 @Transient를 달아주어야 한다.

* 엔티티 클래스 속성은 자바이므로 카멜케이싱을 따르는데,
   이는 DB로 넘어가면서 자동으로 스네이크케이싱에 맞춰진다. ex) createDate -> create_date

* 일반적으로 엔티티는 setter 구현하지 않고
   롬복의 @Builder 통한 빌드패턴 사용하고, 데이터 변경시에는 필요한 메소드를 엔티티에 추가하여 사용한다.




게시판에서 사용할 질문과 답변 엔티티를 하나씩 만드는 경우,
질문과 답변은 서로 매칭될 수 있기 때문에 상호 엔티티에 상호 속성을 하나씩 넣어줄 수 있다.
private Question question;
private Answer answer;

질문 하나에 답변이 여러개 달리기 때문에 
Asnwer 엔티티속 Question 속성에는 @ManyToOne 어노테이션을
Question 엔티티속 Answer 속성에는 @OneToMany 어노테이션을 달아준다.
-> 이 때 답변이 여러개로 관리되므로 Question 엔티티속 Answer 속성은 private List<Answer> answerList; 이럭헤 리스트로 만들어 준다.

* OneToMany에 줄 수 있는 옵션 예시
 (mappedBy = "question", cascade = CascadeType.REMOVE)
-> mappedBy는 참조 엔티티 속성명을 의미하므로 Answer엔티티 속 Question 속성명인 question 부여.
-> cascade는 삭제시 처리 방법으로, 질문 삭제시 답변도 모두 삭제되어야하므로 CascadeType.REMOVE 지정.

ManyToOne, OneToMany는 FK 지정이다.

--------------------------------------------------------------------------------------------------------------

레포지토리

엔티티에 의해 생성된 DB 테이블에 접근하는 메서드들을 사용하기 위한 인터페이스.
CRUD 처리 계층

레포지토리 인터페이스는 JpaRepository 인터페이스 상속받아 구현
상속시 제네릭스 타입으로 <대상이 되는 엔티티 타입, 해당 엔티티 PK 타입>

ex) public interface QuestionRepository extends JpaRepository<Question, Integer>



--------------------------------------------------------------------------------------------------------------

스프링부트 테스트

JUnit 기반의 스플이부트 테스트 프레임워크.

/프로젝트명/src/test/java/com/mysite/프로젝트명/프로젝트명ApplicationTest.java

아래 JPA CRUD에서 테스트 클래스 활용하고 있으니 참조

------------------------------------------------------------------------------------------------------------

JPA CRUD 사용법



ex) insert

package com.mysite.sbb;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;


@SpringBootTest									// 해당 클래스가 테스트 클래스임을 의미.
class SbbApplicationTests {

    @Autowired									// 스프링 DI(의존성주입) 기능. 스프링이 객체를 자동으로 생성해준다.
    private QuestionRepository questionRepository;

    @Test										// 해당 메소드가 테스트 메소드임을 나타냄. 위 클래스를 JUnit으로 실행하면 해당 메소드 실행된다.
    void testJpa() {        
        Question q1 = new Question();
        q1.setSubject("sbb가 무엇인가요?");
        q1.setContent("sbb에 대해서 알고 싶습니다.");
        q1.setCreateDate(LocalDateTime.now());
        this.questionRepository.save(q1);  // 첫번째 질문 저장

        Question q2 = new Question();
        q2.setSubject("스프링부트 모델 질문입니다.");
        q2.setContent("id는 자동으로 생성되나요?");
        q2.setCreateDate(LocalDateTime.now());
        this.questionRepository.save(q2);  // 두번째 질문 저장
    }
}

* Autowired의 경우 순환참조 등의 문제로 생성자를 통한 객체주입 방식이 권장된다. 테스트에서는 생성자 통한 객체 주입이 불가능해 Autowired를 사용한다.


위와 같이 작성 후 Run - Run as - JUnit Test 클릭 -> 테스트 수행 (로컬서버 꺼져있어야 함)

서버 기동후 H2 콘솔 확인해보면 insert가 실행되어 2줄이 들어왔음을 알 수 있다.





ex) select

    @Test
    void testJpa() {
        List<Question> all = this.questionRepository.findAll();
        assertEquals(2, all.size());

        Question q = all.get(0);
        assertEquals("sbb가 무엇인가요?", q.getSubject());
    }

findAll() -> 모든 행을 조회하는 메소드

assertEquals(기대값, 실제값) -> 두 값이 동일한지 조사. 동일하지 안하면 테스트 실패처리.
두번째로 쓰인 메소드는 첫번째 데이터 제목이 "sbb가 무엇인가요?"와 일치하는지도 테스트했다.



ex) findById

    @Test
    void testJpa() {
        Optional<Question> oq = this.questionRepository.findById(1);
        if(oq.isPresent()) {
            Question q = oq.get();
            assertEquals("sbb가 무엇인가요?", q.getSubject());
        }
    }
}

findById(id값) -> id값으로 행을 조회.

리턴 타입이 Question이 아닌 Optional임을 주의.
isPresent로 값이 존재하는지 확인한 후 get으로 값을 가져온다.





-- 그 외 데이터 조회 방법 	
ex) findBySubject 등 -> 지원하지 않으므로 따로 만들어야 한다.

QuestionRepository 인터페이스 하위에 
Question findBySubject(String subject);
메소드를 만든다.

그러면

@Test
void testJpa() {
	Question q = this.questionRepository.findBySubject("sbb가 무엇인가요?");
		assertEquals(1, q.getId());
}
와 같이 사용 가능하다.

=> findBy + 엔티티 속성명
레포지토리 메소드를 작성하면, 스프링이 DI 기능으로 알아서 해당 속성의 값으로 데이터를 조회하는 메소드를 완성해준다.



추가 ex)
repository에 Question findBySubjectAndContent(String subject, String content); 삽입 후

@Test
void testJpa() {
	Question q = this.questionRepository.findBySubjectAndContent("sbb가 무엇인가요?", "sbb에 대해서 알고 싶습니다.");
	assertEquals(1, q.getId());
}





그 외에

findBySubjectOrContent		(where절에 or 조건으로 엮음)

findByCreateDateBetween		(두 값 사이의 값으로 검색)

findByIdLessThan			(더 작은 항목 검색)

findByIdGraterThanEqual		(크거나 같은 항목 검색)

findBySubjectLike			(like 검색)

findBySubjectIn(Subject[] subjects)	(여러 값 중에 하나인 항목 검색)

findBySubjectOrderByCreateDateAsc	(검색 결과 정렬하여 전달)

등등

쿼리생성규칙 공식문서 참조
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation





- 데이터 수정

package com.mysite.sbb;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;


@SpringBootTest
class SbbApplicationTests {

    @Autowired
    private QuestionRepository questionRepository;

    @Test
    void testJpa() {
        Optional<Question> oq = this.questionRepository.findById(1);
        assertTrue(oq.isPresent());
        Question q = oq.get();
        q.setSubject("수정된 제목");
        this.questionRepository.save(q);
    }
}

assertTrue(값) -> 값이 true인지 검사



- 데이터 삭제

@Test
void testJpa() {
    assertEquals(2, this.questionRepository.count());
    Optional<Question> oq = this.questionRepository.findById(1);
    assertTrue(oq.isPresent());
    Question q = oq.get();
    this.questionRepository.delete(q);
    assertEquals(1, this.questionRepository.count());
}



- 답변 데이터 생성 후 저장

@Test
void testJpa() {
    Optional<Question> oq = this.questionRepository.findById(2);
    assertTrue(oq.isPresent());
    Question q = oq.get();

    Answer a = new Answer();
    a.setContent("네 자동으로 생성됩니다.");
    a.setQuestion(q);  // 어떤 질문의 답변인지 알기위해서 Question 객체가 필요하다.
    a.setCreateDate(LocalDateTime.now());
    this.answerRepository.save(a);
}



- 답변 조회

@Test
void testJpa() {
        Optional<Answer> oa = this.answerRepository.findById(1);
        assertTrue(oa.isPresent());
        Answer a = oa.get();
        assertEquals(2, a.getQuestion().getId());
}

id 1인 답변을 조회 후 해당 답변의 질문의 id가 2인지 검사.



- 답변에 연결된 질문 찾기 vs 질문에 달린 답변 찾기

위에서 답변에 연결된 질문 찾기는 간단했다.
하지만 반대의 경우 여러 답변이 존재할 수 있으므로 answerList를 이용해야 한다.

@Test
void testJPA() {
	Optional<Question> oq = this.questionRepository.findById(2);
	assertTrue(oq.isPresent());
    	Question q = oq.get();

    	List<Answer> answerList = q.getAnswerList();
    	
    	assertEquals(1, answerList.size());
    	assertEquals("네 자동으로 생성됩니다.", answerList.get(0).getContent());	
}

=> 에러가 발생한다. 
q에 해당하는 answerList는 q.getAnswerList() 메소드 수행시점에 쿼리를 수행하여 정보를 가져오는데,
findById 사용후 DB 연결 세션이 끊어졌기 때문. -> 테스트라서 그런거지 실제수행시에는 세션이 끊어지지 않아 괜찮다.

테스트시에 이러한 문제를 해결하기 위해서는 테스트메소드 위에 @Transactional 어노테이션을 붙여줘야 한다.

* answerList를 필요한 시점(getAnswerList를 실행한 시점)에 가져오는 것은
ManyToOne이나 OneToMany 어노테이션에서 (fatch=FetchType.LAZY) 설정이 되어 있기 때문(default). 한번에 가져오는건 EAGER 방식을 설정해줘야 한다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------









