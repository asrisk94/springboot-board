
스프링부트 프로젝트 기본 구조

ORM

JPA

엔티티

레포지토리

JPA CRUD

Model 클래스

Model 클래스

redirect 리다이렉트

spring-boot validation 설치시 사용 가능한 어노테이션

서비스

	스프링 서큐리티

스프링 서큐리티 로그인

스프링 서큐리티 + thymeleaf 본인인증

스프링 서큐리티 th:action 미실행 CSRF 수동 입력

data-uri

anchor

=================================================================================

스프링부트 프로젝트 기본 구조

- src/main/java 디렉토리

스프링부트 컨트롤러, 폼, DTO, 데이터베이스 처리를 위한 엔티티, 서비스 파일 등 작성하는 공간.



- 프로젝트명 + Application.java 파일

스프링부트 어플리케이션에서 시작을 담당하는 파일. (자동생성)
application 클래스 위에는 반드시 @SpringBootApplication 어노테이션 존재해야 한다. -> 모든 설정 관리



- templates 디렉토리

(src/main/resources 디렉토리 하위) 디렉토리인 templates 디렉토리에는 템플릿 파일을 저장한다.
템플릿 파일은 HTML 파일 형태로 자바 객체와 연동되는 파일. templates 디렉토리에는 질문목록, 질문 상세 등의 html 파일 저장.



- static 디렉토리
(src/main/resources 디렉토리 하위) 프로젝트 css, js, 이미지 파일 등을 저장하는 공간.



- application.properties

(src/main/resources 디렉토리 하위) 프로퍼티 파일은 프로젝트  환경 설정 역할.
프로젝트 환경, DB 설정 등을 이 파일에 저장.



- src/test/java 디렉토리

프로젝트에서 작성한 파일을 테스트하기 위한 테스트 코드 작성 공간.
JUnit과 스프링부트 테스팅 도구 사용하여 서버를 실행하지 않은 상태에서 src/main/java 디렉토리 작성 코드 테스트.



- build.gradle 파일

그레이들이 사용하는 환경 파일. ant, maven과 같은 이전 세대 빌드 도구의 단점을 보완하고 장점을 취합하여 만든 빌드 도구.
build.gradle 파일에는 프로젝트를 위한 필요한 플러그인과 라이브러리 등을 기술.

--------------------------------------------------------------------------------------------------------------------------------------------------

ORM (Object Relational Mapping)

객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것
DB에 데이터를 저장하는 테이블을 자바 클래스로 만들어 관리 가능하게 해주는 기술.
DB 종류와 상관없이 일관된 코드 유지 가능.
유지보수 용이 / 개발자가 달라도 통일된 쿼리 작성 가능 / 오류 발생률 낮아짐

-------------------------------------------------------------------------------------------------------------------------------------------------

JPA (Java Persistence API)

자바진영에서 ORM의 기술표준으로 사용하는 인터페이스 모음

JPA는 인터페이스이므로 구현하는 실제 클래스 필요.
대표적 클래스에는 하이버네이트가 있다.

--------------------------------------------------------------------------------------------------------------

엔티티

DB 테이블과 매핑되는 자바 클래스.

클래스위에 @Entity 달아줘야 한다. (@Controller 사용과 동일)

 - 사용되는 어노테이션들

@Id
 - PK 지정

@GeneratedValue(strategy = GenerationType.IDENTITY)
 - 값 저장시 해당 속성값을 따로 지정하지 않아도 1씩 증가하며 세팅.
 - strategy는 채번 규칙. GenerationType.IDENTITY는 해당 컬럼만의 독립적 시퀀스를 사용한다는 뜻.
   이를 지정하지 않으면 다른 컬럼들과 시퀀스를 공유하므로 일정한 순서의 고유번호를 생성하지 못한다.

@Column
 - 해당 속성을 컬럼으로 지정.
   사실 지정하지 않아도 알아서 인식하기 때문에, 이걸 달아주는 경우는 속성의 속성을 지정하기 위함.
  ex) @Column(length = 200)	@Column(columnDefinition = "TEXT")
        컬럼 길이 200		   컬럼길이 지정 어려울 경우 TEXT 속성으로 지정 (변동)
 - 따라서 컬럼이 아니라고 지정하려면 @Transient를 달아주어야 한다.

* 엔티티 클래스 속성은 자바이므로 카멜케이싱을 따르는데,
   이는 DB로 넘어가면서 자동으로 스네이크케이싱에 맞춰진다. ex) createDate -> create_date

* 일반적으로 엔티티는 setter 구현하지 않고
   롬복의 @Builder 통한 빌드패턴 사용하고, 데이터 변경시에는 필요한 메소드를 엔티티에 추가하여 사용한다.




게시판에서 사용할 질문과 답변 엔티티를 하나씩 만드는 경우,
질문과 답변은 서로 매칭될 수 있기 때문에 상호 엔티티에 상호 속성을 하나씩 넣어줄 수 있다.
private Question question;
private Answer answer;

질문 하나에 답변이 여러개 달리기 때문에 
Asnwer 엔티티속 Question 속성에는 @ManyToOne 어노테이션을
Question 엔티티속 Answer 속성에는 @OneToMany 어노테이션을 달아준다.
-> 이 때 답변이 여러개로 관리되므로 Question 엔티티속 Answer 속성은 private List<Answer> answerList; 이럭헤 리스트로 만들어 준다.

* OneToMany에 줄 수 있는 옵션 예시
 (mappedBy = "question", cascade = CascadeType.REMOVE)
-> mappedBy는 참조 엔티티 속성명을 의미하므로 Answer엔티티 속 Question 속성명인 question 부여.
-> cascade는 삭제시 처리 방법으로, 질문 삭제시 답변도 모두 삭제되어야하므로 CascadeType.REMOVE 지정.

ManyToOne, OneToMany는 FK 지정이다.

--------------------------------------------------------------------------------------------------------------

레포지토리

엔티티에 의해 생성된 DB 테이블에 접근하는 메서드들을 사용하기 위한 인터페이스.
CRUD 처리 계층

레포지토리 인터페이스는 JpaRepository 인터페이스 상속받아 구현
상속시 제네릭스 타입으로 <대상이 되는 엔티티 타입, 해당 엔티티 PK 타입>

ex) public interface QuestionRepository extends JpaRepository<Question, Integer>



--------------------------------------------------------------------------------------------------------------

스프링부트 테스트

JUnit 기반의 스플이부트 테스트 프레임워크.

/프로젝트명/src/test/java/com/mysite/프로젝트명/프로젝트명ApplicationTest.java

아래 JPA CRUD에서 테스트 클래스 활용하고 있으니 참조

------------------------------------------------------------------------------------------------------------

JPA CRUD 사용법



ex) insert

package com.mysite.sbb;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;


@SpringBootTest									// 해당 클래스가 테스트 클래스임을 의미.
class SbbApplicationTests {

    @Autowired									// 스프링 DI(의존성주입) 기능. 스프링이 객체를 자동으로 생성해준다.
    private QuestionRepository questionRepository;

    @Test										// 해당 메소드가 테스트 메소드임을 나타냄. 위 클래스를 JUnit으로 실행하면 해당 메소드 실행된다.
    void testJpa() {        
        Question q1 = new Question();
        q1.setSubject("sbb가 무엇인가요?");
        q1.setContent("sbb에 대해서 알고 싶습니다.");
        q1.setCreateDate(LocalDateTime.now());
        this.questionRepository.save(q1);  // 첫번째 질문 저장

        Question q2 = new Question();
        q2.setSubject("스프링부트 모델 질문입니다.");
        q2.setContent("id는 자동으로 생성되나요?");
        q2.setCreateDate(LocalDateTime.now());
        this.questionRepository.save(q2);  // 두번째 질문 저장
    }
}

* Autowired의 경우 순환참조 등의 문제로 생성자를 통한 객체주입 방식이 권장된다. 테스트에서는 생성자 통한 객체 주입이 불가능해 Autowired를 사용한다.


위와 같이 작성 후 Run - Run as - JUnit Test 클릭 -> 테스트 수행 (로컬서버 꺼져있어야 함)

서버 기동후 H2 콘솔 확인해보면 insert가 실행되어 2줄이 들어왔음을 알 수 있다.





ex) select

    @Test
    void testJpa() {
        List<Question> all = this.questionRepository.findAll();
        assertEquals(2, all.size());

        Question q = all.get(0);
        assertEquals("sbb가 무엇인가요?", q.getSubject());
    }

findAll() -> 모든 행을 조회하는 메소드

assertEquals(기대값, 실제값) -> 두 값이 동일한지 조사. 동일하지 안하면 테스트 실패처리.
두번째로 쓰인 메소드는 첫번째 데이터 제목이 "sbb가 무엇인가요?"와 일치하는지도 테스트했다.



ex) findById

    @Test
    void testJpa() {
        Optional<Question> oq = this.questionRepository.findById(1);
        if(oq.isPresent()) {
            Question q = oq.get();
            assertEquals("sbb가 무엇인가요?", q.getSubject());
        }
    }
}

findById(id값) -> id값으로 행을 조회.

리턴 타입이 Question이 아닌 Optional임을 주의.
isPresent로 값이 존재하는지 확인한 후 get으로 값을 가져온다.





-- 그 외 데이터 조회 방법 	
ex) findBySubject 등 -> 지원하지 않으므로 따로 만들어야 한다.

QuestionRepository 인터페이스 하위에 
Question findBySubject(String subject);
메소드를 만든다.

그러면

@Test
void testJpa() {
	Question q = this.questionRepository.findBySubject("sbb가 무엇인가요?");
		assertEquals(1, q.getId());
}
와 같이 사용 가능하다.

=> findBy + 엔티티 속성명
레포지토리 메소드를 작성하면, 스프링이 DI 기능으로 알아서 해당 속성의 값으로 데이터를 조회하는 메소드를 완성해준다.



추가 ex)
repository에 Question findBySubjectAndContent(String subject, String content); 삽입 후

@Test
void testJpa() {
	Question q = this.questionRepository.findBySubjectAndContent("sbb가 무엇인가요?", "sbb에 대해서 알고 싶습니다.");
	assertEquals(1, q.getId());
}





그 외에

findBySubjectOrContent		(where절에 or 조건으로 엮음)

findByCreateDateBetween		(두 값 사이의 값으로 검색)

findByIdLessThan			(더 작은 항목 검색)

findByIdGraterThanEqual		(크거나 같은 항목 검색)

findBySubjectLike			(like 검색)

findBySubjectIn(Subject[] subjects)	(여러 값 중에 하나인 항목 검색)

findBySubjectOrderByCreateDateAsc	(검색 결과 정렬하여 전달)

등등

쿼리생성규칙 공식문서 참조
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation





- 데이터 수정

package com.mysite.sbb;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;


@SpringBootTest
class SbbApplicationTests {

    @Autowired
    private QuestionRepository questionRepository;

    @Test
    void testJpa() {
        Optional<Question> oq = this.questionRepository.findById(1);
        assertTrue(oq.isPresent());
        Question q = oq.get();
        q.setSubject("수정된 제목");
        this.questionRepository.save(q);
    }
}

assertTrue(값) -> 값이 true인지 검사



- 데이터 삭제

@Test
void testJpa() {
    assertEquals(2, this.questionRepository.count());
    Optional<Question> oq = this.questionRepository.findById(1);
    assertTrue(oq.isPresent());
    Question q = oq.get();
    this.questionRepository.delete(q);
    assertEquals(1, this.questionRepository.count());
}



- 답변 데이터 생성 후 저장

@Test
void testJpa() {
    Optional<Question> oq = this.questionRepository.findById(2);
    assertTrue(oq.isPresent());
    Question q = oq.get();

    Answer a = new Answer();
    a.setContent("네 자동으로 생성됩니다.");
    a.setQuestion(q);  // 어떤 질문의 답변인지 알기위해서 Question 객체가 필요하다.
    a.setCreateDate(LocalDateTime.now());
    this.answerRepository.save(a);
}



- 답변 조회

@Test
void testJpa() {
        Optional<Answer> oa = this.answerRepository.findById(1);
        assertTrue(oa.isPresent());
        Answer a = oa.get();
        assertEquals(2, a.getQuestion().getId());
}

id 1인 답변을 조회 후 해당 답변의 질문의 id가 2인지 검사.



- 답변에 연결된 질문 찾기 vs 질문에 달린 답변 찾기

위에서 답변에 연결된 질문 찾기는 간단했다.
하지만 반대의 경우 여러 답변이 존재할 수 있으므로 answerList를 이용해야 한다.

@Test
void testJPA() {
	Optional<Question> oq = this.questionRepository.findById(2);
	assertTrue(oq.isPresent());
    	Question q = oq.get();

    	List<Answer> answerList = q.getAnswerList();
    	
    	assertEquals(1, answerList.size());
    	assertEquals("네 자동으로 생성됩니다.", answerList.get(0).getContent());	
}

=> 에러가 발생한다. 
q에 해당하는 answerList는 q.getAnswerList() 메소드 수행시점에 쿼리를 수행하여 정보를 가져오는데,
findById 사용후 DB 연결 세션이 끊어졌기 때문. -> 테스트라서 그런거지 실제수행시에는 세션이 끊어지지 않아 괜찮다.

테스트시에 이러한 문제를 해결하기 위해서는 테스트메소드 위에 @Transactional 어노테이션을 붙여줘야 한다.

* answerList를 필요한 시점(getAnswerList를 실행한 시점)에 가져오는 것은
ManyToOne이나 OneToMany 어노테이션에서 (fatch=FetchType.LAZY) 설정이 되어 있기 때문(default). 한번에 가져오는건 EAGER 방식을 설정해줘야 한다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Model 클래스

import org.springframework.ui.Model;

리퀘스트 파라미터값들을 알아서 받아오는 모델 클래스.
리스폰스에 담아 보내는 용도로도 사용 가능.

Model 객체는 따로 생성할 필요 없이 컨트롤러 메소드의 매개변수로 지정하기만 하면
스프링부트가 자동으로 Model 객체를 생성한다.



ex)

package com.mysite.sbb.question;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Controller
public class QuestionController {

    private final QuestionRepository questionRepository;

    @RequestMapping("/question/list")
    public String list(Model model) {
        List<Question> questionList = this.questionRepository.findAll();
        model.addAttribute("questionList", questionList);
        return "question_list";
    }
}


src/main/resources/
question_list.html 파일

<table>
	<thead>
		<tr>
			<th>제목</th>
			<th>작성일시</th>
		</tr>
	</thead>
	<tbody>
		<tr th:each="question : ${questionList}">
			<td th:text="${question.subject}"></td>
			<td th:text="${question.createDate}"></td>
		</tr>
	</tbody>
</table>


=>  questionRepository에서 findAll()로 모두 긁어온 정보를 questionList 형태로 model 클래스 객체에 담아 넘긴다.
=> 대상이 되는 html 파일에서 꺼내어 쓰고 있다. (th는 thymeleaf / jstl과 비슷)

-------------------------------------------------------------------------------------------------------------------------------------------------

Thymeleaf

타임리프 자주사용 속성

th:if="${question != null}"
-> 조건문에 해당하면 해당 태그요소 출력


th:each="question : ${questionList}"
-> 반복문
th:each="question, loop : ${questionList}"
-> loop를 사용해 아래와 같은 사용 가능

loop.index - 반복 순서, 0부터 1씩 증가
loop.count - 반복 순서, 1부터 1씩 증가
loop.size - 반복 객체의 요소 갯수 (예: questionList의 요소 갯수)
loop.first - 루프의 첫번째 순서인 경우 true
loop.last - 루프의 마지막 순서인 경우 true
loop.odd - 루프의 홀수번째 순서인 경우 true
loop.even - 루프의 짝수번째 순서인 경우 true
loop.current - 현재 대입된 객체 (예: 위의 경우 question과 동일)



th:text="${question.subject}"
-> 값 출력

-----------------------------------------------------------------------------------------------

redirect 리다이렉트

다른곳으로 다시 연결하라는 명령어를 클라이언트단에 보내어, 
해당 주소로 다시 리퀘스트하도록 함 (리턴값에 해당 리퀘스트맵을 주면 된다)

사용법 - redirect: + 해당 주소
ex)
redirect:/question/list -> http://localhost:8080/question/list 이동


redirect vs forward

redirect:<URL>	->	URL로 리다이렉트 (완전히 새로운 URL로 요청)
forward:<URL>	->	URL로 포워드 (기존 요청 값들이 유지된 상태로 URL 전환) 

-----------------------------------------------------------------------------------------------

서비스

컨트롤러에서 레포지토리를 직접 호출하지 않고 중간에 두는 과정. 스프링에서 데이터 처리를 위해 작성하는 클래스

서비스 목적
1. 모듈화 :  여러 레포지토리를 이용하여 같은 처리과정을 거치는 작업이 많을 때,
	   이를 서비스로 구현해두면 컨트롤러에서 한번씩 호출하여 사용하면 되지만,
	   구현하지 않는다면 그 로직을 필요로하는 모든 컨트롤러들에 해당 로직을 구현해야 한다.

2. 보안 : 해커에 의해 컨트롤러가 해킹당하더라도, 서비스를 동해 처리하도록 구현해둠으로써
	컨트롤러에서 직접 레포지토리에 접근하지는 못하도록 할 수 있다.

3. 엔티티 객체와 DTO 객체의 변환
Question, Answer와 같은 엔티티 클래스는 DB와 직접 맞닿아 있기 때문에,
컨트롤러나 Thymeleaf 같은 템플릿 엔진에 전달하여 사용하는 것은 좋지 않다.
-> 엔티티 직접 사용하여 속성 변경시 테이블 컬럼이 변경될 여지가 있음.

따라서 엔티티를 대신할 DTO 클래스를 만들어 서비스에서 변환하여 사용하는 것이 좋다.

------------------------------------------------------------------------------------------------------

spring-boot validation 설치시 사용 가능한 어노테이션

@Size	문자 길이를 제한한다.
@NotNull	Null을 허용하지 않는다.
@NotEmpty	Null 또는 빈 문자열("")을 허용하지 않는다.
@Past	과거 날짜만 가능
@Future	미래 날짜만 가능
@FutureOrPresent	미래 또는 오늘날짜만 가능
@Max	최대값
@Min	최소값
@Pattern	정규식으로 검증

https://beanvalidation.org/ 
참조

------------------------------------------------------------------------------------------------------

스프링 서큐리티



스프링 기반 어플리케이션 인증과 권한을 담당하는 스프링 하위 프레임워크

인증(Authenticate) - 로그인
권한( Authorize) - 인증된 사용자가 어떤 것을 할 수 있는지 의미



ex) securityConfig 클래스 작성

package com.mysite.sbb;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;



@Configuration
@EnableWebSecurity
public class SecurityConfig {

		@Bean
		public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
			
			http.authorizeRequests().antMatchers("/**").permitAll();
			
			return http.build();
		}
}

@Configuration - 스프링 환경설정 파일임을 의미
@EnableWebSecurity - 모든 요청 URL이 스프링 서큐리티의 제어를 받도록 만드는 어노테이션
	-> 이 어노테이션 사용시 내부적으로 SpringSecurityFilterChain 동작하여 URL필터 적용된다.



* 스프링 서큐리티 적용시 H2 콘솔에 403 Forbidden 오류발생.
	-> CSRF기능이 동작하기 때문. 
	(cross site request forgery / 웹사이트 취약점 공격 방지 기술 / 세션 통해 CSRF 토큰값 발행하고 form 전송시 검증)
	=> 이를 풀어주기 위해서는 예외처리 필요

(securityConfig 클래스내 메소드)
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/**").permitAll()
            .and()
                .csrf().ignoringAntMatchers("/h2-console/**")
            ;
        return http.build();
    }

and() - http 객체의 설정을 이어서 할 수 있게 하는 메소드.
http.csrf().ignoringAntMatchers("/h2-console/**") 	-> 	/h2-console/로 시작하는 URL은 CSRF 검증을 하지 않는다는 설정.



* 위처럼 설정하면 기본 화면은 연결되지만,
 frame 구조로 작성된 화면의 경우 출력되지 않는다. clickjacking 공격 막기 위해 X-Frame-Options 헤더값을 사용하여 방지하기 때문.

아래와 같이 XFrameOptions 헤더값으로 SAMEORIGIN을 설정하면 
frame에 포함된 페이지가 페이지를 제공하는 사이트와 동일한 경우 계속 사용할 수 있다.

    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/**").permitAll()
            .and()
                .csrf().ignoringAntMatchers("/h2-console/**")
            .and()
                .headers()
                .addHeaderWriter(new XFrameOptionsHeaderWriter(
                        XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN))
            ;
        return http.build();      
    }

-------------------------------------------------------------------------------------------------------------

스프링 서큐리티 로그인



SecurityConfig 클래스

 - 로그인 확인
.and()
				.formLogin()
				.loginPage("/user/login")
				.defaultSuccessUrl("/")



 - 스프링 서큐리티 인증 담당 (AuthenticationManager)
@Bean
public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
	return authenticationConfiguration.getAuthenticationManager();
}
-> 해당 빈 생성시 스프링 내부동작으로 인해 해당 클래스에 작성해둔 UserSecurityService와 PasswordEncoder가 자동으로 설정된다.


 - 로그인시 아이디 받아 체크하는 서비스 메소드
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException
(클래스에 UserDetailsService 인터페이스 구현)



 - principal
컨트롤러 메소드 매개 파라미터에 Principal principal 선언해주면,
pricipal.getName() 통해서 로그인한 사용자의 아이디를 알 수 있다. 이를 통해 검증 가능.



 - 로그인이 필요한 url 요청시 에러나지 않고 로그인화면으로 유도하기
해당 url들에 매핑되어있는 메소드 상단에 @PreAuthorize("isAuthenticate()") 달기 - 인증되지 않았으면 로그인 화면 유도
SecurityConfig에 @EnableGlobalMethodSecurity(prePostEnabled = true) 어노테이션	- @PreAuthorize 어노테이션 사용 위해 필요

------------------------------------------------------------------------------------------------------------------------

스프링 서큐리티 + thymeleaf 본인인증

#authentication.getPrincipal().getUsername() == question.author.username
-> 인증받은 계정정보의 유저네임이 질문 작성자이름과 같은지.

ex)
<a th:href="@{|/question/modify/${question.id}|}" class="btn btn-sm btn-outline-secondary"
     sec:authorize="isAuthenticated()"
     th:if="${question.author != null and #authentication.getPrincipal().getUsername() == question.author.username}"
     th:text="수정"></a>

---------------------------------------------------------------------------------------------------------------------

스프링 서큐리티 th:action 미실행 CSRF 수동 입력



form 태그에서 action 속성을 사용하지 않을 경우 자동으로 csrf 값을 생성해주지 않기 때문에 아래와 같이
숨겨진 input 값을 통해 csrf 값을 넣어주어야 한다.
ex)
<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />



폼 태그의 action 속성 없이 폼을 전송(submit)하면 
폼의 action은 현재의 URL(브라우저에 표시되는 URL주소)을 기준으로 전송이 된다. 

즉, 질문 등록시 브라우저 표시 URL은 /question/create이기 때문에 POST로 폼 전송시 action 속성에 /question/create가 설정이 되고, 
질문 수정시 브라우저 표시 URL은 /question/modify/2 형태의 URL이기 때문에 POST 전송시 action 속성에 /question/modify/2 형태의 URL이 설정된다.

------------------------------------------------------------------------------------------------------------------------------------

th:data

data는 자바스크립트에서 this를 사용해 호출할 수 있는 객체이다. (this.dataset.~)

ex)
<a href="javascript:void(0);" th:data-uri="@{|/question/delete/${question.id}|}"

const delete_elements = document.getElementsByClassName("delete");
Array.from(delete_elements).forEach(function(element) {
	element.addEventListener('click', function() {
		if(confirm("정말로 삭제하시겠습니까?")) {
			location.href = this.dataset.uri;
        		};
    	});
});

=> html에서 data-uri="저장값"을 만듦으로서 data객체에 uri라는 속성을 생성.
=> js에서 this.dataset.uri 를 통해 해당 속성값 호출. (data로 만들고 dataset으로 호출)

data- 뒤에 오는 속성명은 뭐여도 좋다. js에서 동일한 이름으로 호출만 해주면 된다.

-------------------------------------------------------------------------------------------------

anchor

호출 url 뒤에 html 선택자를 붙여 해당 태그 위치로 스크롤바가 이동하도록 해주는 기능.

ex)
/question/detail/{id}#test
-> /question/detail/{id}에 해당하는 페이지가 호출된 후 id가 test인 태그로 이동. (#은 id 선택자)


ex)
<a th:id="|answer_${answer.id}|"></a>

return String.format("redirect:/question/detail/%s#answer_%s", 
    answer.getQuestion().getId(), answer.getId());

-------------------------------------------------------------------------------------------












